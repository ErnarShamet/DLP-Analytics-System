# DLP-Analytics-System/docker-compose.yml
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args: # Передаем build-time переменные для Dockerfile фронтенда
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5001/api} # Использует значение из .env или дефолт
        REACT_APP_NAME: ${REACT_APP_NAME:-DLP Analytics System}
    ports:
      - "${FRONTEND_PORT:-3000}:80" # Nginx в контейнере слушает на 80
    depends_on:
      - backend
    environment: # Эти переменные доступны внутри контейнера во время выполнения, но для CRA фронтенда они обычно не используются после сборки
      - NODE_ENV=${NODE_ENV:-development}
      # REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5001/api} # Эта переменная нужна на этапе сборки
    volumes: # Для разработки: монтируем исходники для hot-reloading (если ваш Dockerfile и dev server это поддерживают)
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      # Если Nginx не видит изменения, возможно, нужно будет пересобирать образ при изменениях или настроить Nginx на отдачу статики из монтированной папки build
    networks:
      - dlp_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-5001}:5001" # Используем порт из .env или дефолтный 5001
    depends_on:
      - mongo
      - redis
      - ml-engine
    environment: # Эти переменные переопределят те, что в .env файле ВНУТРИ контейнера, если он там есть
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-5001}
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE_ACCESS=${JWT_EXPIRE_ACCESS}
      - JWT_EXPIRE_REFRESH=${JWT_EXPIRE_REFRESH}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - ML_ENGINE_URL=${ML_ENGINE_URL:-http://ml-engine:5002}
      # EMAIL_HOST=${EMAIL_HOST}
      # EMAIL_PORT=${EMAIL_PORT}
      # EMAIL_USER=${EMAIL_USER}
      # EMAIL_PASS=${EMAIL_PASS}
      # EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - ./backend:/app # Монтируем исходники для разработки с nodemon
      - /app/node_modules # Исключаем node_modules хоста, чтобы использовать те, что установлены в контейнере
    networks:
      - dlp_network
    restart: unless-stopped

  ml-engine:
    build:
      context: ./ml-engine
      dockerfile: Dockerfile
    ports:
      - "${ML_ENGINE_PORT:-5002}:${ML_ENGINE_PORT:-5002}"
    environment:
      - ML_ENGINE_PORT=${ML_ENGINE_PORT:-5002}
      # Добавьте другие переменные, если они нужны ML движку
    volumes:
      - ./ml-engine/models:/app/models # Монтируем модели, чтобы не пересобирать образ при их изменении
      - ./ml-engine/scripts:/app/scripts # Если вы хотите видеть изменения в скриптах без пересборки (зависит от того, как запускается Python приложение)
      - ./ml-engine/app.py:/app/app.py # Для разработки с Flask debug mode
    networks:
      - dlp_network
    restart: unless-stopped

  mongo:
    image: mongo:6.0 # Рекомендуется использовать конкретную версию
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db # Именованный том для сохранения данных MongoDB
      # Можно добавить скрипты инициализации, если нужно:
      # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment: # Для создания пользователя при первом запуске (если не используется init-скрипт)
      # MONGO_INITDB_ROOT_USERNAME=root # Лучше задавать через .env или напрямую, если это только для локальной разработки
      # MONGO_INITDB_ROOT_PASSWORD=example
      # MONGO_INITDB_DATABASE=dlp_analytics_expanded # Создаст эту БД, если ее нет
      # Если используете кастомного пользователя:
      # MONGO_INITDB_USERNAME=${MONGO_USER:-user}
      # MONGO_INITDB_PASSWORD=${MONGO_PASSWORD:-password}
    networks:
      - dlp_network
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine # Рекомендуется использовать конкретную версию
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Именованный том для сохранения данных Redis (если включен persistence в Redis)
    # command: redis-server --save 60 1 --loglevel warning # Пример команды для включения RDB persistence
    networks:
      - dlp_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0 # Используйте актуальную версию
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml # Монтируем конфигурационный файл
      - prometheus_data:/prometheus # Именованный том для данных Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # - '--web.enable-lifecycle' # Для возможности перезагрузки конфигурации через API
    networks:
      - dlp_network
    depends_on: # Prometheus должен стартовать после сервисов, которые он будет скрейпить (не обязательно, но логично)
      - backend
      - ml-engine
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.2.0 # Используйте актуальную версию
    ports:
      - "${GRAFANA_PORT:-3001}:3000" # Grafana слушает на 3000 в контейнере
    volumes:
      - grafana_data:/var/lib/grafana # Именованный том для данных Grafana (дашборды, пользователи и т.д.)
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/ # Для автоматической настройки источников данных и дашбордов
      # - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini # Если вы используете кастомный grafana.ini
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin} # Задайте через .env или оставьте дефолт
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin} # Задайте через .env или оставьте дефолт
      - GF_USERS_ALLOW_SIGN_UP=false
      # - GF_AUTH_ANONYMOUS_ENABLED=true # Если нужен анонимный доступ
      # - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    networks:
      - dlp_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes: # Определяем именованные тома
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks: # Определяем сеть, чтобы контейнеры могли общаться друг с другом по именам сервисов
  dlp_network:
    driver: bridge